"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var moment = require("moment");
var settings_service_1 = require("../services/settings.service");
var CalendarService = (function () {
    function CalendarService(settingsService) {
        this.settingsService = settingsService;
        this.locale = 'hu';
        this.monthOffset = 0;
        moment.locale(this.locale);
    }
    CalendarService.prototype.stepMonth = function (monthDelta) {
        this.monthOffset += monthDelta;
    };
    CalendarService.prototype.getMonth = function () {
        var result = [];
        var now = moment().date(1).add(this.monthOffset, 'months'); // first day of month
        var actWeek = now.week();
        var actMonth = now.month();
        var row = 0;
        do {
            // insert result object
            result.push({ row: row, col: this.convertDayOfWeek(now.day()), day: now.date() });
            // next day
            now.add(1, 'day');
            if (actWeek != now.week()) {
                row++;
                actWeek = now.week();
            }
        } while (actMonth == now.month());
        return result;
    };
    CalendarService.prototype.getMonthName = function () {
        return moment().date(1).add(this.monthOffset, 'months').format('MMMM');
    };
    /**
     * Converts JS day of the week where sunday is 0 to sunday = 6 and monday = 0
     * @param day
     */
    CalendarService.prototype.convertDayOfWeek = function (day) {
        var cday = day - 1;
        return cday < 0 ? 6 : cday;
    };
    CalendarService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [settings_service_1.SettingsService])
    ], CalendarService);
    return CalendarService;
}());
exports.CalendarService = CalendarService;
exports.markers = [
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3 small-dot' },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsK0JBQWlDO0FBQ2pDLGlFQUE4RDtBQUc5RDtJQUtJLHlCQUNZLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUpwQyxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2QsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFLNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELG1DQUFTLEdBQVQsVUFBVSxVQUFVO1FBQ2hCLElBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxDQUFDO0lBQ25DLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksSUFBSSxNQUFNLEdBQWUsRUFBRSxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtRQUNqRixJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQztZQUNBLHVCQUF1QjtZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xGLFdBQVc7WUFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVsQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsR0FBRyxFQUFFLENBQUM7Z0JBQ04sT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDO1FBQ0wsQ0FBQyxRQUFRLFFBQVEsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFFbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsc0NBQVksR0FBWjtRQUNJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRDs7O09BR0c7SUFDSywwQ0FBZ0IsR0FBeEIsVUFBeUIsR0FBVztRQUNoQyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQS9DUSxlQUFlO1FBRDNCLGlCQUFVLEVBQUU7eUNBT29CLGtDQUFlO09BTm5DLGVBQWUsQ0FpRDNCO0lBQUQsc0JBQUM7Q0FBQSxBQWpERCxJQWlEQztBQWpEWSwwQ0FBZTtBQStEakIsUUFBQSxPQUFPLEdBQWlCO0lBQy9CLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0lBQzNFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0lBQzNFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0NBQzlFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NldHRpbmdzLnNlcnZpY2UnXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBsb2NhbGUgPSAnaHUnO1xuICAgIHByaXZhdGUgbW9udGhPZmZzZXQ6IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzZXR0aW5nc1NlcnZpY2U6IFNldHRpbmdzU2VydmljZVxuICAgICkge1xuICAgICAgICBtb21lbnQubG9jYWxlKHRoaXMubG9jYWxlKTtcbiAgICB9XG5cbiAgICBzdGVwTW9udGgobW9udGhEZWx0YSkge1xuICAgICAgICB0aGlzLm1vbnRoT2Zmc2V0ICs9IG1vbnRoRGVsdGE7XG4gICAgfVxuXG4gICAgZ2V0TW9udGgoKTogYW55W10ge1xuICAgICAgICB2YXIgcmVzdWx0OiBJRGF5SXRlbVtdID0gW107XG4gICAgICAgIGxldCBub3cgPSBtb21lbnQoKS5kYXRlKDEpLmFkZCh0aGlzLm1vbnRoT2Zmc2V0LCAnbW9udGhzJyk7IC8vIGZpcnN0IGRheSBvZiBtb250aFxuICAgICAgICBsZXQgYWN0V2VlayA9IG5vdy53ZWVrKCk7XG4gICAgICAgIGxldCBhY3RNb250aCA9IG5vdy5tb250aCgpO1xuICAgICAgICBsZXQgcm93ID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gaW5zZXJ0IHJlc3VsdCBvYmplY3RcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgcm93OiByb3csIGNvbDogdGhpcy5jb252ZXJ0RGF5T2ZXZWVrKG5vdy5kYXkoKSksIGRheTogbm93LmRhdGUoKSB9KTtcbiAgICAgICAgICAgIC8vIG5leHQgZGF5XG4gICAgICAgICAgICBub3cuYWRkKDEsICdkYXknKTtcblxuICAgICAgICAgICAgaWYgKGFjdFdlZWsgIT0gbm93LndlZWsoKSkgeyAvLyBpbmNyZW1lbnQgcm93IGlmIHdlZWsgZGlmZmVyZW50IChpbXBvcnRhbnQgYXJvdW5kIGRlYyAzMS4pXG4gICAgICAgICAgICAgICAgcm93Kys7XG4gICAgICAgICAgICAgICAgYWN0V2VlayA9IG5vdy53ZWVrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGFjdE1vbnRoID09IG5vdy5tb250aCgpKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldE1vbnRoTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbW9tZW50KCkuZGF0ZSgxKS5hZGQodGhpcy5tb250aE9mZnNldCwgJ21vbnRocycpLmZvcm1hdCgnTU1NTScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIEpTIGRheSBvZiB0aGUgd2VlayB3aGVyZSBzdW5kYXkgaXMgMCB0byBzdW5kYXkgPSA2IGFuZCBtb25kYXkgPSAwXG4gICAgICogQHBhcmFtIGRheSBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnZlcnREYXlPZldlZWsoZGF5OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBsZXQgY2RheSA9IGRheSAtIDE7XG4gICAgICAgIHJldHVybiBjZGF5IDwgMCA/IDYgOiBjZGF5O1xuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXlJdGVtIHtcbiAgICByb3c6IG51bWJlcjtcbiAgICBjb2w6IG51bWJlcjtcbiAgICBkYXk6IG51bWJlcjtcbiAgICBtYXJrZXI/OiBJRGF5TWFya2VyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXlNYXJrZXIge1xuICAgIGljb246IHN0cmluZztcbiAgICBjc3NDbGFzczogc3RyaW5nO1xufVxuXG5leHBvcnQgdmFyIG1hcmtlcnM6IElEYXlNYXJrZXJbXSA9IFtcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMScgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMicgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMycgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMScgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMicgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMycgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMSBzbWFsbC1kb3QnIH0sXG4gICAgeyBpY29uOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZjExMSksIGNzc0NsYXNzOiAnbWFya2VyLWNvbG9yLTIgc21hbGwtZG90JyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0zIHNtYWxsLWRvdCcgfSxcbl07XG5cbiJdfQ==