"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var moment = require("moment");
var settings_service_1 = require("../services/settings.service");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var CalendarService = (function () {
    function CalendarService(settings) {
        this.settings = settings;
        this.locale = 'hu';
        moment.locale(this.locale);
        this.actMonth = moment().date(1); // set current month 1st
        this.monthObservable = new BehaviorSubject_1.BehaviorSubject(this.actMonth);
        this.daysObservable = new BehaviorSubject_1.BehaviorSubject(this.getMonth());
    }
    CalendarService.prototype.setMonth = function (newMonth) {
        if (moment.isMoment(newMonth)) {
            this.actMonth = newMonth.clone().date(1);
        }
        else {
            this.actMonth = moment.unix(newMonth);
        }
        this.monthObservable.next(this.actMonth.clone());
        this.daysObservable.next(this.getMonth());
    };
    CalendarService.prototype.stepMonth = function (monthDelta) {
        this.actMonth.add(monthDelta, 'months');
        this.monthObservable.next(this.actMonth.clone());
        this.daysObservable.next(this.getMonth());
    };
    CalendarService.prototype.getMonth = function () {
        var result = [];
        // let now = moment().date(1).add(this.monthOffset, 'months'); // first day of month
        var now = this.actMonth.clone();
        var actWeek = now.week();
        var actMonth = now.month();
        var row = 0;
        do {
            // get markers for this day from storage
            var marker = this.settings.getDay(now);
            // insert result object
            result.push({
                row: row,
                col: this.convertDayOfWeek(now.day()),
                day: now.date(),
                date: now.clone(),
                marker: marker
            });
            // next day
            now.add(1, 'day');
            if (actWeek != now.week()) {
                row++;
                actWeek = now.week();
            }
        } while (actMonth == now.month());
        return result;
    };
    CalendarService.prototype.getMonthName = function () {
        return this.actMonth.format('MMMM');
    };
    /**
     * Converts JS day of the week where sunday is 0 to sunday = 6 and monday = 0
     * @param day
     */
    CalendarService.prototype.convertDayOfWeek = function (day) {
        var cday = day - 1;
        return cday < 0 ? 6 : cday;
    };
    CalendarService.prototype.selectCalendar = function (imageCalendar) {
        this.imageCalendar = imageCalendar;
        if (imageCalendar.lastMonth) {
            this.setMonth(imageCalendar.lastMonth);
        }
    };
    CalendarService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [settings_service_1.SettingsService])
    ], CalendarService);
    return CalendarService;
}());
exports.CalendarService = CalendarService;
exports.markers = [
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3 small-dot' },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsK0JBQWlDO0FBQ2pDLGlFQUE4RDtBQUc5RCx3REFBdUQ7QUFJdkQ7SUFPSSx5QkFDWSxRQUF5QjtRQUF6QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQU43QixXQUFNLEdBQUcsSUFBSSxDQUFDO1FBUWxCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO1FBQzFELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxDQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksaUNBQWUsQ0FBYSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsa0NBQVEsR0FBUixVQUFTLFFBQXdCO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUks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TUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO0lBQ2pFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0lBQzNFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0lBQzNFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO0NBQzlFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NldHRpbmdzLnNlcnZpY2UnXG5pbXBvcnQgeyBNb21lbnQsIGlzTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEltYWdlU291cmNlIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9pbWFnZS1zb3VyY2UvaW1hZ2Utc291cmNlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMvQmVoYXZpb3JTdWJqZWN0JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgICBwdWJsaWMgaW1hZ2VDYWxlbmRhcjogSUltYWdlQ2FsZW5kYXI7XG4gICAgcHJpdmF0ZSBsb2NhbGUgPSAnaHUnO1xuICAgIHB1YmxpYyBkYXlzT2JzZXJ2YWJsZTogQmVoYXZpb3JTdWJqZWN0PElEYXlJdGVtW10+O1xuICAgIHB1YmxpYyBtb250aE9ic2VydmFibGU6IEJlaGF2aW9yU3ViamVjdDxNb21lbnQ+O1xuICAgIHByaXZhdGUgYWN0TW9udGg6IE1vbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHNldHRpbmdzOiBTZXR0aW5nc1NlcnZpY2VcbiAgICApIHtcbiAgICAgICAgbW9tZW50LmxvY2FsZSh0aGlzLmxvY2FsZSk7XG4gICAgICAgIHRoaXMuYWN0TW9udGggPSBtb21lbnQoKS5kYXRlKDEpOyAvLyBzZXQgY3VycmVudCBtb250aCAxc3RcbiAgICAgICAgdGhpcy5tb250aE9ic2VydmFibGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1vbWVudD4odGhpcy5hY3RNb250aCk7XG4gICAgICAgIHRoaXMuZGF5c09ic2VydmFibGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PElEYXlJdGVtW10+KHRoaXMuZ2V0TW9udGgoKSk7XG4gICAgfVxuXG4gICAgc2V0TW9udGgobmV3TW9udGg6TW9tZW50IHwgbnVtYmVyKXtcbiAgICAgICAgaWYgKG1vbWVudC5pc01vbWVudChuZXdNb250aCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0TW9udGggPSBuZXdNb250aC5jbG9uZSgpLmRhdGUoMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdE1vbnRoID0gbW9tZW50LnVuaXgobmV3TW9udGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb250aE9ic2VydmFibGUubmV4dCh0aGlzLmFjdE1vbnRoLmNsb25lKCkpO1xuICAgICAgICB0aGlzLmRheXNPYnNlcnZhYmxlLm5leHQodGhpcy5nZXRNb250aCgpKTtcbiAgICB9XG5cbiAgICBzdGVwTW9udGgobW9udGhEZWx0YSkge1xuICAgICAgICB0aGlzLmFjdE1vbnRoLmFkZChtb250aERlbHRhLCAnbW9udGhzJyk7XG4gICAgICAgIHRoaXMubW9udGhPYnNlcnZhYmxlLm5leHQodGhpcy5hY3RNb250aC5jbG9uZSgpKTtcbiAgICAgICAgdGhpcy5kYXlzT2JzZXJ2YWJsZS5uZXh0KHRoaXMuZ2V0TW9udGgoKSk7XG4gICAgfVxuXG4gICAgZ2V0TW9udGgoKTogYW55W10ge1xuICAgICAgICB2YXIgcmVzdWx0OiBJRGF5SXRlbVtdID0gW107XG4gICAgICAgIC8vIGxldCBub3cgPSBtb21lbnQoKS5kYXRlKDEpLmFkZCh0aGlzLm1vbnRoT2Zmc2V0LCAnbW9udGhzJyk7IC8vIGZpcnN0IGRheSBvZiBtb250aFxuICAgICAgICBsZXQgbm93ID0gdGhpcy5hY3RNb250aC5jbG9uZSgpO1xuICAgICAgICBsZXQgYWN0V2VlayA9IG5vdy53ZWVrKCk7XG4gICAgICAgIGxldCBhY3RNb250aCA9IG5vdy5tb250aCgpO1xuICAgICAgICBsZXQgcm93ID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gZ2V0IG1hcmtlcnMgZm9yIHRoaXMgZGF5IGZyb20gc3RvcmFnZVxuICAgICAgICAgICAgbGV0IG1hcmtlcjpJRGF5TWFya2VyID0gdGhpcy5zZXR0aW5ncy5nZXREYXkobm93KTtcbiAgICAgICAgICAgIC8vIGluc2VydCByZXN1bHQgb2JqZWN0XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IFxuICAgICAgICAgICAgICAgIHJvdzogcm93LCBcbiAgICAgICAgICAgICAgICBjb2w6IHRoaXMuY29udmVydERheU9mV2Vlayhub3cuZGF5KCkpLCBcbiAgICAgICAgICAgICAgICBkYXk6IG5vdy5kYXRlKCksXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LmNsb25lKCksXG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gbmV4dCBkYXlcbiAgICAgICAgICAgIG5vdy5hZGQoMSwgJ2RheScpO1xuXG4gICAgICAgICAgICBpZiAoYWN0V2VlayAhPSBub3cud2VlaygpKSB7IC8vIGluY3JlbWVudCByb3cgaWYgd2VlayBkaWZmZXJlbnQgKGltcG9ydGFudCBhcm91bmQgZGVjIDMxLilcbiAgICAgICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgICAgICBhY3RXZWVrID0gbm93LndlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoYWN0TW9udGggPT0gbm93Lm1vbnRoKCkpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0TW9udGhOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdE1vbnRoLmZvcm1hdCgnTU1NTScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIEpTIGRheSBvZiB0aGUgd2VlayB3aGVyZSBzdW5kYXkgaXMgMCB0byBzdW5kYXkgPSA2IGFuZCBtb25kYXkgPSAwXG4gICAgICogQHBhcmFtIGRheSBcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnZlcnREYXlPZldlZWsoZGF5OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBsZXQgY2RheSA9IGRheSAtIDE7XG4gICAgICAgIHJldHVybiBjZGF5IDwgMCA/IDYgOiBjZGF5O1xuICAgIH1cblxuICAgIHNlbGVjdENhbGVuZGFyKGltYWdlQ2FsZW5kYXI6SUltYWdlQ2FsZW5kYXIpIHtcbiAgICAgICAgdGhpcy5pbWFnZUNhbGVuZGFyID0gaW1hZ2VDYWxlbmRhcjtcbiAgICAgICAgaWYgKGltYWdlQ2FsZW5kYXIubGFzdE1vbnRoKSB7XG4gICAgICAgICAgICB0aGlzLnNldE1vbnRoKGltYWdlQ2FsZW5kYXIubGFzdE1vbnRoKTtcbiAgICAgICAgfSAgICAgICAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURheUl0ZW0ge1xuICAgIHJvdzogbnVtYmVyO1xuICAgIGNvbDogbnVtYmVyO1xuICAgIGRheTogbnVtYmVyO1xuICAgIGRhdGU6IE1vbWVudDtcbiAgICBtYXJrZXI/OiBJRGF5TWFya2VyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXlNYXJrZXIge1xuICAgIGljb246IHN0cmluZztcbiAgICBjc3NDbGFzczogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElJbWFnZUNhbGVuZGFyIHtcbiAgICBpbWFnZUZpbGU6IHN0cmluZztcbiAgICBjYWxlbmRhckxlZnQ6IG51bWJlcjtcbiAgICBjYWxlbmRhclRvcDogbnVtYmVyO1xuICAgIGNhbGVuZGFyU2NhbGU6IG51bWJlcjtcbiAgICBjcmVhdGVkT246IG51bWJlcjtcbiAgICBsYXN0TW9udGg6IG51bWJlcjtcbiAgICAvLyBpbWFnZVNvdXJjZT86IEltYWdlU291cmNlO1xufVxuXG5leHBvcnQgdmFyIG1hcmtlcnM6IElEYXlNYXJrZXJbXSA9IFtcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMScgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMicgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMycgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMScgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMicgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMWRiKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMycgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMSBzbWFsbC1kb3QnIH0sXG4gICAgeyBpY29uOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZjExMSksIGNzc0NsYXNzOiAnbWFya2VyLWNvbG9yLTIgc21hbGwtZG90JyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0zIHNtYWxsLWRvdCcgfSxcbl07XG5cbiJdfQ==