"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var moment = require("moment");
var CalendarService = (function () {
    function CalendarService() {
        this.locale = 'hu';
        this.monthOffset = 0;
        moment.locale(this.locale);
    }
    CalendarService.prototype.stepMonth = function (monthDelta) {
        this.monthOffset += monthDelta;
    };
    CalendarService.prototype.getMonth = function () {
        var result = [];
        var now = moment().date(1).add(this.monthOffset, 'months'); // first day of month
        var actWeek = now.week();
        var actMonth = now.month();
        var row = 0;
        do {
            // insert result object
            result.push({ row: row, col: this.convertDayOfWeek(now.day()), day: now.date() });
            // next day
            now.add(1, 'day');
            if (actWeek != now.week()) {
                row++;
                actWeek = now.week();
            }
        } while (actMonth == now.month());
        return result;
    };
    CalendarService.prototype.getMonthName = function () {
        return moment().date(1).add(this.monthOffset, 'months').format('MMMM');
    };
    /**
     * Converts JS day of the week where sunday is 0 to sunday = 6 and monday = 0
     * @param day
     */
    CalendarService.prototype.convertDayOfWeek = function (day) {
        var cday = day - 1;
        return cday < 0 ? 6 : cday;
    };
    CalendarService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CalendarService);
    return CalendarService;
}());
exports.CalendarService = CalendarService;
exports.markers = [
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-1' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-2' },
    { icon: String.fromCharCode(0xf1db), cssClass: 'marker-color-3' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-1 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-2 small-dot' },
    { icon: String.fromCharCode(0xf111), cssClass: 'marker-color-3 small-dot' },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsK0JBQWlDO0FBR2pDO0lBS0k7UUFIUSxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2QsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFHNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELG1DQUFTLEdBQVQsVUFBVSxVQUFVO1FBQ2hCLElBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxDQUFDO0lBQ25DLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksSUFBSSxNQUFNLEdBQWUsRUFBRSxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtRQUNqRixJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekIsSUFBSSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQztZQUNBLHVCQUF1QjtZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xGLFdBQVc7WUFDWCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVsQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsR0FBRyxFQUFFLENBQUM7Z0JBQ04sT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDO1FBQ0wsQ0FBQyxRQUFRLFFBQVEsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFFbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsc0NBQVksR0FBWjtRQUNJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRDs7O09BR0c7SUFDSywwQ0FBZ0IsR0FBeEIsVUFBeUIsR0FBVztRQUNoQyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQTdDUSxlQUFlO1FBRDNCLGlCQUFVLEVBQUU7O09BQ0EsZUFBZSxDQStDM0I7SUFBRCxzQkFBQztDQUFBLEFBL0NELElBK0NDO0FBL0NZLDBDQUFlO0FBNkRqQixRQUFBLE9BQU8sR0FBaUI7SUFDL0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7SUFDakUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7SUFDM0UsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7SUFDM0UsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7Q0FDOUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgbG9jYWxlID0gJ2h1JztcbiAgICBwcml2YXRlIG1vbnRoT2Zmc2V0OiBudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIG1vbWVudC5sb2NhbGUodGhpcy5sb2NhbGUpO1xuICAgIH1cblxuICAgIHN0ZXBNb250aChtb250aERlbHRhKSB7XG4gICAgICAgIHRoaXMubW9udGhPZmZzZXQgKz0gbW9udGhEZWx0YTtcbiAgICB9XG5cbiAgICBnZXRNb250aCgpOiBhbnlbXSB7XG4gICAgICAgIHZhciByZXN1bHQ6IElEYXlJdGVtW10gPSBbXTtcbiAgICAgICAgbGV0IG5vdyA9IG1vbWVudCgpLmRhdGUoMSkuYWRkKHRoaXMubW9udGhPZmZzZXQsICdtb250aHMnKTsgLy8gZmlyc3QgZGF5IG9mIG1vbnRoXG4gICAgICAgIGxldCBhY3RXZWVrID0gbm93LndlZWsoKTtcbiAgICAgICAgbGV0IGFjdE1vbnRoID0gbm93Lm1vbnRoKCk7XG4gICAgICAgIGxldCByb3cgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBpbnNlcnQgcmVzdWx0IG9iamVjdFxuICAgICAgICAgICAgcmVzdWx0LnB1c2goeyByb3c6IHJvdywgY29sOiB0aGlzLmNvbnZlcnREYXlPZldlZWsobm93LmRheSgpKSwgZGF5OiBub3cuZGF0ZSgpIH0pO1xuICAgICAgICAgICAgLy8gbmV4dCBkYXlcbiAgICAgICAgICAgIG5vdy5hZGQoMSwgJ2RheScpO1xuXG4gICAgICAgICAgICBpZiAoYWN0V2VlayAhPSBub3cud2VlaygpKSB7IC8vIGluY3JlbWVudCByb3cgaWYgd2VlayBkaWZmZXJlbnQgKGltcG9ydGFudCBhcm91bmQgZGVjIDMxLilcbiAgICAgICAgICAgICAgICByb3crKztcbiAgICAgICAgICAgICAgICBhY3RXZWVrID0gbm93LndlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoYWN0TW9udGggPT0gbm93Lm1vbnRoKCkpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0TW9udGhOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBtb21lbnQoKS5kYXRlKDEpLmFkZCh0aGlzLm1vbnRoT2Zmc2V0LCAnbW9udGhzJykuZm9ybWF0KCdNTU1NJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgSlMgZGF5IG9mIHRoZSB3ZWVrIHdoZXJlIHN1bmRheSBpcyAwIHRvIHN1bmRheSA9IDYgYW5kIG1vbmRheSA9IDBcbiAgICAgKiBAcGFyYW0gZGF5IFxuICAgICAqL1xuICAgIHByaXZhdGUgY29udmVydERheU9mV2VlayhkYXk6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGxldCBjZGF5ID0gZGF5IC0gMTtcbiAgICAgICAgcmV0dXJuIGNkYXkgPCAwID8gNiA6IGNkYXk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURheUl0ZW0ge1xuICAgIHJvdzogbnVtYmVyO1xuICAgIGNvbDogbnVtYmVyO1xuICAgIGRheTogbnVtYmVyO1xuICAgIG1hcmtlcj86IElEYXlNYXJrZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURheU1hcmtlciB7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB2YXIgbWFya2VyczogSURheU1hcmtlcltdID0gW1xuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0xJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0yJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0zJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxZGIpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0xJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxZGIpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0yJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxZGIpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0zJyB9LFxuICAgIHsgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZSgweGYxMTEpLCBjc3NDbGFzczogJ21hcmtlci1jb2xvci0xIHNtYWxsLWRvdCcgfSxcbiAgICB7IGljb246IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMTExKSwgY3NzQ2xhc3M6ICdtYXJrZXItY29sb3ItMiBzbWFsbC1kb3QnIH0sXG4gICAgeyBpY29uOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZjExMSksIGNzc0NsYXNzOiAnbWFya2VyLWNvbG9yLTMgc21hbGwtZG90JyB9LFxuXTtcblxuIl19